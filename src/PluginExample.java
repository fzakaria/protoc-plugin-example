import com.google.protobuf.DescriptorProtos.FileDescriptorProto;
import com.google.protobuf.Descriptors;
import com.google.protobuf.Descriptors.FileDescriptor;
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorRequest;
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse;
import com.google.protobuf.compiler.PluginProtos.CodeGeneratorResponse.File;

import java.util.List;

public class PluginExample {

    private static FileDescriptor recursivelyBuildFileDescriptors(FileDescriptorProto proto, List<FileDescriptorProto> protoFiles) {
        List<FileDescriptor> dependencies = proto.getDependencyList().stream()
                .flatMap(name ->
                        protoFiles.stream()
                        .filter(p -> p.getName().equals(name)).findFirst().stream())
                .map(p -> recursivelyBuildFileDescriptors(p, protoFiles))
                .toList();
        try {
            return FileDescriptor.buildFrom(proto, dependencies.toArray(new FileDescriptor[0]));
        } catch (Descriptors.DescriptorValidationException e) {
            throw new RuntimeException(e);
        }
    }

    public static void main(String[] args) throws Exception {
        System.err.println("Starting plugin");

        CodeGeneratorRequest request = CodeGeneratorRequest.parseFrom(System.in);
        List<FileDescriptor> protos = request.getProtoFileList().stream().map(file ->
                recursivelyBuildFileDescriptors(file, request.getProtoFileList())).toList();

        // Let us add a custom method to our generated code
        // ref: https://protobuf.dev/reference/java/java-generated/#plugins
        // We will use class_scope:TYPENAME
        List<File> generatedFiles = protos.stream()
                .flatMap(p -> p.getMessageTypes().stream())
                .map(m -> {
                    final FileDescriptor fd = m.getFile();
                    String javaPackage = fd.getOptions().getJavaPackage();
                    final String fileName = javaPackage.replace(".", "/") + "/" + m.getName() + ".java";
                    return File.newBuilder().setContent("""
                        // Generated by the plugin
                        public String hello() {
                            return "Hello from " + this.getClass().getSimpleName();
                        }
                               \s""")
                            .setName(fileName)
                            .setInsertionPoint(String.format("class_scope:%s", m.getName()))
                            .build();
                }).toList();

        CodeGeneratorResponse response = CodeGeneratorResponse.newBuilder()
                .setSupportedFeatures(CodeGeneratorResponse.Feature.FEATURE_PROTO3_OPTIONAL.getNumber())
                .addAllFile(generatedFiles)
                .build();

        response.writeTo(System.out);
    }
}